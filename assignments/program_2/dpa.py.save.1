import threading
from time import sleep
import os
from os import system
import curses
import locale
import time
import threading
import random
import json
import struct
from time import sleep
    
        

"""=========================================================="""

# Layout of the table (P = philosopher, f = fork):
#          P0
#       f3    f0
#     P3        P1
#       f2    f1
#          P2

# Number of philosophers at the table. 
# There'll be the same number of forks.
numPhilosophers = 4

# Lists to hold the philosophers and the forks.
# Philosophers are threads while forks are locks.
philosophers = []
forks = []

screenLock = threading.Lock()

class Philosopher(threading.Thread):
    def __init__(self, index,window,cell):
        threading.Thread.__init__(self)
        self.index = index
 #       self.window = window
#        self.cell = cell
 #       self.color = self.window.randomColor()  # Color to draw with
        self.waiter=waiter

    def run(self):
        # Assign left and right fork
        leftForkIndex = self.index
        rightForkIndex = (self.index - 1) % numPhilosophers
        forkPair = ForkPair(leftForkIndex, rightForkIndex)
        
   
        # Eat forever
        while True:
	with self.waiter:
            forkPair.pickUp()
                if self.cell.col >= self.window.maxx-2:
                    self.cell.col = 10
                    for i in range(10,self.window.maxx-2):
                        self.window.cprint(self.cell.row, i, "#",16)
                time.sleep(.05)
            time.sleep(.01)
            forkPair.putDown()

class ForkPair:
    def __init__(self, leftForkIndex, rightForkIndex):
        # Order forks by index to prevent deadlock
        if leftForkIndex > rightForkIndex:
            leftForkIndex, rightForkIndex = rightForkIndex, leftForkIndex
        self.firstFork = forks[leftForkIndex]
        self.secondFork = forks[rightForkIndex]
    

    def pickUp(self):
        # Acquire by starting with the lower index
        self.firstFork.acquire()
        self.secondFork.acquire()

    def putDown(self):
        # The order does not matter here
        self.firstFork.release()
        self.secondFork.release()

if __name__ == "__main__":

    screenLock = threading.Lock()
    window = CursesWindow()
    row = 5
    
    # Create philosophers and forks
    for i in range(0, numPhilosophers):
        philosophers.append(Philosopher(i,window,Cell(5+row,5)))
        forks.append(threading.Lock())
        row += 1

    # All philosophers start eating
    for philosopher in philosophers:
        philosopher.start()

    # Allow CTRL + C to exit the program
    try:
        while True: time.sleep(021)
    except (KeyboardInterrupt, SystemExit):
        os._exit(0)
